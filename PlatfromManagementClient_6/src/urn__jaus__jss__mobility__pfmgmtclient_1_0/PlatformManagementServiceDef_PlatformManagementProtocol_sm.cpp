/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : PlatformManagementServiceDef_PlatformManagementProtocol_sm.sm
 */

#include "urn__jaus__jss__mobility__pfmgmtclient_1_0/Messages/MessageSet.h"
#include "urn__jaus__jss__mobility__pfmgmtclient_1_0/PlatformManagementServiceDef_PlatformManagementProtocol.h"
#include "include/urn__jaus__jss__mobility__pfmgmtclient_1_0/PlatformManagementServiceDef_PlatformManagementProtocol_sm.h"

using namespace statemap;

namespace urn__jaus__jss__mobility__pfmgmtclient_1_0
{
    // Static class declarations.
    PlatformManagementServiceDef_PlatformManagementProtocol_SM_Ready PlatformManagementServiceDef_PlatformManagementProtocol_SM::Ready("PlatformManagementServiceDef_PlatformManagementProtocol_SM::Ready", 0);
    PlatformManagementServiceDef_PlatformManagementProtocol_SM_Internally_Generated_State_DO_NOT_USE PlatformManagementServiceDef_PlatformManagementProtocol_SM::Internally_Generated_State_DO_NOT_USE("PlatformManagementServiceDef_PlatformManagementProtocol_SM::Internally_Generated_State_DO_NOT_USE", 1);

    void PlatformManagementServiceDef_PlatformManagementProtocolState::ReportConfigurationTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context)
    {
        Default(context);
        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocolState::ReportConfigurationTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context, ReportConfiguration& msg, unsigned int& sender)
    {
        Default(context);
        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocolState::ReportHeartbeatPulseTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context)
    {
        Default(context);
        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocolState::ReportHeartbeatPulseTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context, ReportHeartbeatPulse& msg, unsigned int& sender)
    {
        Default(context);
        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocolState::ReportIdentificationTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context)
    {
        Default(context);
        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocolState::ReportIdentificationTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context, ReportIdentification& msg, unsigned int& sender)
    {
        Default(context);
        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocolState::ReportServicesTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context)
    {
        Default(context);
        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocolState::ReportServicesTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context, ReportServices& msg, unsigned int& sender)
    {
        Default(context);
        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocolState::ReportSubsystemListTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context)
    {
        Default(context);
        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocolState::ReportSubsystemListTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context, ReportSubsystemList& msg, unsigned int& sender)
    {
        Default(context);
        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocolState::Default(PlatformManagementServiceDef_PlatformManagementProtocolContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocol_SM_Ready::ReportConfigurationTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context, ReportConfiguration& msg, unsigned int& sender)
    {
        PlatformManagementServiceDef_PlatformManagementProtocol& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Ready"
            << std::endl;
        }

        PlatformManagementServiceDef_PlatformManagementProtocolState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: PlatformManagementServiceDef_PlatformManagementProtocol_SM::Ready::ReportConfigurationTransition(ReportConfiguration& msg, unsigned int& sender)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.sendQueryHeartbearPulseAction(msg, sender);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Ready::ReportConfigurationTransition(ReportConfiguration& msg, unsigned int& sender)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocol_SM_Ready::ReportHeartbeatPulseTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context, ReportHeartbeatPulse& msg, unsigned int& sender)
    {
        PlatformManagementServiceDef_PlatformManagementProtocol& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Ready"
            << std::endl;
        }

        PlatformManagementServiceDef_PlatformManagementProtocolState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: PlatformManagementServiceDef_PlatformManagementProtocol_SM::Ready::ReportHeartbeatPulseTransition(ReportHeartbeatPulse& msg, unsigned int& sender)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.handleReportHeartbeatpulseAction(msg, sender);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Ready::ReportHeartbeatPulseTransition(ReportHeartbeatPulse& msg, unsigned int& sender)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocol_SM_Ready::ReportIdentificationTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context, ReportIdentification& msg, unsigned int& sender)
    {
        PlatformManagementServiceDef_PlatformManagementProtocol& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Ready"
            << std::endl;
        }

        PlatformManagementServiceDef_PlatformManagementProtocolState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: PlatformManagementServiceDef_PlatformManagementProtocol_SM::Ready::ReportIdentificationTransition(ReportIdentification& msg, unsigned int& sender)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.sendQueryServicesAction(msg, sender);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Ready::ReportIdentificationTransition(ReportIdentification& msg, unsigned int& sender)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocol_SM_Ready::ReportServicesTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context, ReportServices& msg, unsigned int& sender)
    {
        PlatformManagementServiceDef_PlatformManagementProtocol& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Ready"
            << std::endl;
        }

        PlatformManagementServiceDef_PlatformManagementProtocolState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: PlatformManagementServiceDef_PlatformManagementProtocol_SM::Ready::ReportServicesTransition(ReportServices& msg, unsigned int& sender)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.sendRegisterServicesAction(msg, sender);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Ready::ReportServicesTransition(ReportServices& msg, unsigned int& sender)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocol_SM_Ready::ReportSubsystemListTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context, ReportSubsystemList& msg, unsigned int& sender)
    {
        PlatformManagementServiceDef_PlatformManagementProtocol& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Ready"
            << std::endl;
        }

        PlatformManagementServiceDef_PlatformManagementProtocolState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: PlatformManagementServiceDef_PlatformManagementProtocol_SM::Ready::ReportSubsystemListTransition(ReportSubsystemList& msg, unsigned int& sender)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.sendQueryConfigurationAction(msg, sender);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Ready::ReportSubsystemListTransition(ReportSubsystemList& msg, unsigned int& sender)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocol_SM_Internally_Generated_State_DO_NOT_USE::ReportConfigurationTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: PlatformManagementServiceDef_PlatformManagementProtocol_SM::Internally_Generated_State_DO_NOT_USE::ReportConfigurationTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Internally_Generated_State_DO_NOT_USE::ReportConfigurationTransition()"
                << std::endl;
        }


        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocol_SM_Internally_Generated_State_DO_NOT_USE::ReportHeartbeatPulseTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: PlatformManagementServiceDef_PlatformManagementProtocol_SM::Internally_Generated_State_DO_NOT_USE::ReportHeartbeatPulseTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Internally_Generated_State_DO_NOT_USE::ReportHeartbeatPulseTransition()"
                << std::endl;
        }


        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocol_SM_Internally_Generated_State_DO_NOT_USE::ReportIdentificationTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: PlatformManagementServiceDef_PlatformManagementProtocol_SM::Internally_Generated_State_DO_NOT_USE::ReportIdentificationTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Internally_Generated_State_DO_NOT_USE::ReportIdentificationTransition()"
                << std::endl;
        }


        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocol_SM_Internally_Generated_State_DO_NOT_USE::ReportServicesTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: PlatformManagementServiceDef_PlatformManagementProtocol_SM::Internally_Generated_State_DO_NOT_USE::ReportServicesTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Internally_Generated_State_DO_NOT_USE::ReportServicesTransition()"
                << std::endl;
        }


        return;
    }

    void PlatformManagementServiceDef_PlatformManagementProtocol_SM_Internally_Generated_State_DO_NOT_USE::ReportSubsystemListTransition(PlatformManagementServiceDef_PlatformManagementProtocolContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: PlatformManagementServiceDef_PlatformManagementProtocol_SM::Internally_Generated_State_DO_NOT_USE::ReportSubsystemListTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : PlatformManagementServiceDef_PlatformManagementProtocol_SM::Internally_Generated_State_DO_NOT_USE::ReportSubsystemListTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
