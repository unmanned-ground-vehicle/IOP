#ifndef _H_WAYPOINTDRIVER_LOCALWAYPONTDRIVERPROTOCOL_SM
#define _H_WAYPOINTDRIVER_LOCALWAYPONTDRIVERPROTOCOL_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : WaypointDriver_LocalWaypontDriverProtocol_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace urn_jaus_jss_mobility_LocalWaypointDriver_1_0
{
    // Forward declarations.
    class WaypointDriver_LocalWaypontDriverProtocol_SM;
    class WaypointDriver_LocalWaypontDriverProtocol_SM_Ready;
    class WaypointDriver_LocalWaypontDriverProtocol_SM_Internally_Generated_State_DO_NOT_USE;
    class WaypointDriver_LocalWaypontDriverProtocol_SM_Default;
    class WaypointDriver_LocalWaypontDriverProtocolState;
    class WaypointDriver_LocalWaypontDriverProtocolContext;
    class WaypointDriver_LocalWaypontDriverProtocol;

    class WaypointDriver_LocalWaypontDriverProtocolState :
        public statemap::State
    {
    public:

        WaypointDriver_LocalWaypontDriverProtocolState(const char *name, int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(WaypointDriver_LocalWaypontDriverProtocolContext&) {};
        virtual void Exit(WaypointDriver_LocalWaypontDriverProtocolContext&) {};

        virtual void QueryLocalWaypointTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context);
        virtual void QueryLocalWaypointTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context, QueryLocalWaypoint& msg, unsigned int& sender);
        virtual void QueryTravelSpeedTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context);
        virtual void QueryTravelSpeedTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context, QueryTravelSpeed& msg, unsigned int& sender);
        virtual void SetLocalWaypointTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context);
        virtual void SetLocalWaypointTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context, SetLocalWaypoint& msg, unsigned int& sender);
        virtual void SetTravelSpeedTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context);
        virtual void SetTravelSpeedTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context, SetTravelSpeed& msg, unsigned int& sender);

    protected:

        virtual void Default(WaypointDriver_LocalWaypontDriverProtocolContext& context);
    };

    class WaypointDriver_LocalWaypontDriverProtocol_SM
    {
    public:

        static WaypointDriver_LocalWaypontDriverProtocol_SM_Ready Ready;
        static WaypointDriver_LocalWaypontDriverProtocol_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE;
    };

    class WaypointDriver_LocalWaypontDriverProtocol_SM_Default :
        public WaypointDriver_LocalWaypontDriverProtocolState
    {
    public:

        WaypointDriver_LocalWaypontDriverProtocol_SM_Default(const char *name, int stateId)
        : WaypointDriver_LocalWaypontDriverProtocolState(name, stateId)
        {};

    };

    class WaypointDriver_LocalWaypontDriverProtocol_SM_Ready :
        public WaypointDriver_LocalWaypontDriverProtocol_SM_Default
    {
    public:
        WaypointDriver_LocalWaypontDriverProtocol_SM_Ready(const char *name, int stateId)
        : WaypointDriver_LocalWaypontDriverProtocol_SM_Default(name, stateId)
        {};

        void QueryLocalWaypointTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context, QueryLocalWaypoint& msg, unsigned int& sender);
        void QueryTravelSpeedTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context, QueryTravelSpeed& msg, unsigned int& sender);
        void SetLocalWaypointTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context, SetLocalWaypoint& msg, unsigned int& sender);
        void SetTravelSpeedTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context, SetTravelSpeed& msg, unsigned int& sender);
    };

    class WaypointDriver_LocalWaypontDriverProtocol_SM_Internally_Generated_State_DO_NOT_USE :
        public WaypointDriver_LocalWaypontDriverProtocol_SM_Default
    {
    public:
        WaypointDriver_LocalWaypontDriverProtocol_SM_Internally_Generated_State_DO_NOT_USE(const char *name, int stateId)
        : WaypointDriver_LocalWaypontDriverProtocol_SM_Default(name, stateId)
        {};

        void QueryLocalWaypointTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context);
        void QueryTravelSpeedTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context);
        void SetLocalWaypointTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context);
        void SetTravelSpeedTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context);
    };

    class WaypointDriver_LocalWaypontDriverProtocolContext :
        public statemap::FSMContext
    {
    public:

        WaypointDriver_LocalWaypontDriverProtocolContext(WaypointDriver_LocalWaypontDriverProtocol& owner)
        : FSMContext(WaypointDriver_LocalWaypontDriverProtocol_SM::Ready),
          _owner(owner)
        {};

        WaypointDriver_LocalWaypontDriverProtocolContext(WaypointDriver_LocalWaypontDriverProtocol& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        WaypointDriver_LocalWaypontDriverProtocol& getOwner() const
        {
            return (_owner);
        };

        WaypointDriver_LocalWaypontDriverProtocolState& getState() const
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return (dynamic_cast<WaypointDriver_LocalWaypontDriverProtocolState&>(*_state));
        };

        void QueryLocalWaypointTransition()
        {
            setTransition("QueryLocalWaypointTransition");
            (getState()).QueryLocalWaypointTransition(*this);
            setTransition(NULL);
        };

        void QueryLocalWaypointTransition(QueryLocalWaypoint& msg, unsigned int& sender)
        {
            setTransition("QueryLocalWaypointTransition");
            (getState()).QueryLocalWaypointTransition(*this, msg, sender);
            setTransition(NULL);
        };

        void QueryTravelSpeedTransition()
        {
            setTransition("QueryTravelSpeedTransition");
            (getState()).QueryTravelSpeedTransition(*this);
            setTransition(NULL);
        };

        void QueryTravelSpeedTransition(QueryTravelSpeed& msg, unsigned int& sender)
        {
            setTransition("QueryTravelSpeedTransition");
            (getState()).QueryTravelSpeedTransition(*this, msg, sender);
            setTransition(NULL);
        };

        void SetLocalWaypointTransition()
        {
            setTransition("SetLocalWaypointTransition");
            (getState()).SetLocalWaypointTransition(*this);
            setTransition(NULL);
        };

        void SetLocalWaypointTransition(SetLocalWaypoint& msg, unsigned int& sender)
        {
            setTransition("SetLocalWaypointTransition");
            (getState()).SetLocalWaypointTransition(*this, msg, sender);
            setTransition(NULL);
        };

        void SetTravelSpeedTransition()
        {
            setTransition("SetTravelSpeedTransition");
            (getState()).SetTravelSpeedTransition(*this);
            setTransition(NULL);
        };

        void SetTravelSpeedTransition(SetTravelSpeed& msg, unsigned int& sender)
        {
            setTransition("SetTravelSpeedTransition");
            (getState()).SetTravelSpeedTransition(*this, msg, sender);
            setTransition(NULL);
        };

    private:

        WaypointDriver_LocalWaypontDriverProtocol& _owner;
    };
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_WAYPOINTDRIVER_LOCALWAYPONTDRIVERPROTOCOL_SM
