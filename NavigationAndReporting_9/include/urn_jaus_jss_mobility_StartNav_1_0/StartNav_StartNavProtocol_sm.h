#ifndef _H_STARTNAV_STARTNAVPROTOCOL_SM
#define _H_STARTNAV_STARTNAVPROTOCOL_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : StartNav_StartNavProtocol_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace urn_jaus_jss_mobility_StartNav_1_0
{
    // Forward declarations.
    class StartNav_StartNavProtocol_SM;
    class StartNav_StartNavProtocol_SM_Ready;
    class StartNav_StartNavProtocol_SM_Internally_Generated_State_DO_NOT_USE;
    class StartNav_StartNavProtocol_SM_Default;
    class StartNav_StartNavProtocolState;
    class StartNav_StartNavProtocolContext;
    class StartNav_StartNavProtocol;

    class StartNav_StartNavProtocolState :
        public statemap::State
    {
    public:

        StartNav_StartNavProtocolState(const char *name, int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(StartNav_StartNavProtocolContext&) {};
        virtual void Exit(StartNav_StartNavProtocolContext&) {};

        virtual void ClearEmergencyTransition(StartNav_StartNavProtocolContext& context);
        virtual void ClearEmergencyTransition(StartNav_StartNavProtocolContext& context, ClearEmergency& msg, unsigned int& sender);
        virtual void QueryLocalPoseTransition(StartNav_StartNavProtocolContext& context);
        virtual void ReleaseControlTransition(StartNav_StartNavProtocolContext& context);
        virtual void ReleaseControlTransition(StartNav_StartNavProtocolContext& context, ReleaseControl& msg, unsigned int& sender);
        virtual void RequestControlTransition(StartNav_StartNavProtocolContext& context);
        virtual void RequestControlTransition(StartNav_StartNavProtocolContext& context, RequestControl& msg, unsigned int& sender);
        virtual void ResumeTransition(StartNav_StartNavProtocolContext& context);
        virtual void ResumeTransition(StartNav_StartNavProtocolContext& context, Resume& msg, unsigned int& sender);
        virtual void SetEmergencyTransition(StartNav_StartNavProtocolContext& context);
        virtual void SetEmergencyTransition(StartNav_StartNavProtocolContext& context, SetEmergency& msg, unsigned int& sender);
        virtual void SetLocalPoseTransition(StartNav_StartNavProtocolContext& context);
        virtual void SetLocalPoseTransition(StartNav_StartNavProtocolContext& context, SetLocalPose& msg, unsigned int& sender);
        virtual void StandbyTransition(StartNav_StartNavProtocolContext& context);
        virtual void StandbyTransition(StartNav_StartNavProtocolContext& context, Standby& msg, unsigned int& sender);

    protected:

        virtual void Default(StartNav_StartNavProtocolContext& context);
    };

    class StartNav_StartNavProtocol_SM
    {
    public:

        static StartNav_StartNavProtocol_SM_Ready Ready;
        static StartNav_StartNavProtocol_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE;
    };

    class StartNav_StartNavProtocol_SM_Default :
        public StartNav_StartNavProtocolState
    {
    public:

        StartNav_StartNavProtocol_SM_Default(const char *name, int stateId)
        : StartNav_StartNavProtocolState(name, stateId)
        {};

    };

    class StartNav_StartNavProtocol_SM_Ready :
        public StartNav_StartNavProtocol_SM_Default
    {
    public:
        StartNav_StartNavProtocol_SM_Ready(const char *name, int stateId)
        : StartNav_StartNavProtocol_SM_Default(name, stateId)
        {};

        void ClearEmergencyTransition(StartNav_StartNavProtocolContext& context, ClearEmergency& msg, unsigned int& sender);
        void ReleaseControlTransition(StartNav_StartNavProtocolContext& context, ReleaseControl& msg, unsigned int& sender);
        void RequestControlTransition(StartNav_StartNavProtocolContext& context, RequestControl& msg, unsigned int& sender);
        void ResumeTransition(StartNav_StartNavProtocolContext& context, Resume& msg, unsigned int& sender);
        void SetEmergencyTransition(StartNav_StartNavProtocolContext& context, SetEmergency& msg, unsigned int& sender);
        void SetLocalPoseTransition(StartNav_StartNavProtocolContext& context, SetLocalPose& msg, unsigned int& sender);
        void StandbyTransition(StartNav_StartNavProtocolContext& context, Standby& msg, unsigned int& sender);
    };

    class StartNav_StartNavProtocol_SM_Internally_Generated_State_DO_NOT_USE :
        public StartNav_StartNavProtocol_SM_Default
    {
    public:
        StartNav_StartNavProtocol_SM_Internally_Generated_State_DO_NOT_USE(const char *name, int stateId)
        : StartNav_StartNavProtocol_SM_Default(name, stateId)
        {};

        void ClearEmergencyTransition(StartNav_StartNavProtocolContext& context);
        void QueryLocalPoseTransition(StartNav_StartNavProtocolContext& context);
        void ReleaseControlTransition(StartNav_StartNavProtocolContext& context);
        void RequestControlTransition(StartNav_StartNavProtocolContext& context);
        void ResumeTransition(StartNav_StartNavProtocolContext& context);
        void SetEmergencyTransition(StartNav_StartNavProtocolContext& context);
        void SetLocalPoseTransition(StartNav_StartNavProtocolContext& context);
        void StandbyTransition(StartNav_StartNavProtocolContext& context);
    };

    class StartNav_StartNavProtocolContext :
        public statemap::FSMContext
    {
    public:

        StartNav_StartNavProtocolContext(StartNav_StartNavProtocol& owner)
        : FSMContext(StartNav_StartNavProtocol_SM::Ready),
          _owner(owner)
        {};

        StartNav_StartNavProtocolContext(StartNav_StartNavProtocol& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        StartNav_StartNavProtocol& getOwner() const
        {
            return (_owner);
        };

        StartNav_StartNavProtocolState& getState() const
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return (dynamic_cast<StartNav_StartNavProtocolState&>(*_state));
        };

        void ClearEmergencyTransition()
        {
            setTransition("ClearEmergencyTransition");
            (getState()).ClearEmergencyTransition(*this);
            setTransition(NULL);
        };

        void ClearEmergencyTransition(ClearEmergency& msg, unsigned int& sender)
        {
            setTransition("ClearEmergencyTransition");
            (getState()).ClearEmergencyTransition(*this, msg, sender);
            setTransition(NULL);
        };

        void QueryLocalPoseTransition()
        {
            setTransition("QueryLocalPoseTransition");
            (getState()).QueryLocalPoseTransition(*this);
            setTransition(NULL);
        };

        void ReleaseControlTransition()
        {
            setTransition("ReleaseControlTransition");
            (getState()).ReleaseControlTransition(*this);
            setTransition(NULL);
        };

        void ReleaseControlTransition(ReleaseControl& msg, unsigned int& sender)
        {
            setTransition("ReleaseControlTransition");
            (getState()).ReleaseControlTransition(*this, msg, sender);
            setTransition(NULL);
        };

        void RequestControlTransition()
        {
            setTransition("RequestControlTransition");
            (getState()).RequestControlTransition(*this);
            setTransition(NULL);
        };

        void RequestControlTransition(RequestControl& msg, unsigned int& sender)
        {
            setTransition("RequestControlTransition");
            (getState()).RequestControlTransition(*this, msg, sender);
            setTransition(NULL);
        };

        void ResumeTransition()
        {
            setTransition("ResumeTransition");
            (getState()).ResumeTransition(*this);
            setTransition(NULL);
        };

        void ResumeTransition(Resume& msg, unsigned int& sender)
        {
            setTransition("ResumeTransition");
            (getState()).ResumeTransition(*this, msg, sender);
            setTransition(NULL);
        };

        void SetEmergencyTransition()
        {
            setTransition("SetEmergencyTransition");
            (getState()).SetEmergencyTransition(*this);
            setTransition(NULL);
        };

        void SetEmergencyTransition(SetEmergency& msg, unsigned int& sender)
        {
            setTransition("SetEmergencyTransition");
            (getState()).SetEmergencyTransition(*this, msg, sender);
            setTransition(NULL);
        };

        void SetLocalPoseTransition()
        {
            setTransition("SetLocalPoseTransition");
            (getState()).SetLocalPoseTransition(*this);
            setTransition(NULL);
        };

        void SetLocalPoseTransition(SetLocalPose& msg, unsigned int& sender)
        {
            setTransition("SetLocalPoseTransition");
            (getState()).SetLocalPoseTransition(*this, msg, sender);
            setTransition(NULL);
        };

        void StandbyTransition()
        {
            setTransition("StandbyTransition");
            (getState()).StandbyTransition(*this);
            setTransition(NULL);
        };

        void StandbyTransition(Standby& msg, unsigned int& sender)
        {
            setTransition("StandbyTransition");
            (getState()).StandbyTransition(*this, msg, sender);
            setTransition(NULL);
        };

    private:

        StartNav_StartNavProtocol& _owner;
    };
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_STARTNAV_STARTNAVPROTOCOL_SM
