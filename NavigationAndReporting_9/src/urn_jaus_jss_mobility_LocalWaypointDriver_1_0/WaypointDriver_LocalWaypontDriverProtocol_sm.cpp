/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : WaypointDriver_LocalWaypontDriverProtocol_sm.sm
 */

#include "urn_jaus_jss_mobility_LocalWaypointDriver_1_0/Messages/MessageSet.h"
#include "urn_jaus_jss_mobility_LocalWaypointDriver_1_0/WaypointDriver_LocalWaypontDriverProtocol.h"
#include "include/urn_jaus_jss_mobility_LocalWaypointDriver_1_0/WaypointDriver_LocalWaypontDriverProtocol_sm.h"

using namespace statemap;

namespace urn_jaus_jss_mobility_LocalWaypointDriver_1_0
{
    // Static class declarations.
    WaypointDriver_LocalWaypontDriverProtocol_SM_Ready WaypointDriver_LocalWaypontDriverProtocol_SM::Ready("WaypointDriver_LocalWaypontDriverProtocol_SM::Ready", 0);
    WaypointDriver_LocalWaypontDriverProtocol_SM_Internally_Generated_State_DO_NOT_USE WaypointDriver_LocalWaypontDriverProtocol_SM::Internally_Generated_State_DO_NOT_USE("WaypointDriver_LocalWaypontDriverProtocol_SM::Internally_Generated_State_DO_NOT_USE", 1);

    void WaypointDriver_LocalWaypontDriverProtocolState::QueryLocalWaypointTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context)
    {
        Default(context);
        return;
    }

    void WaypointDriver_LocalWaypontDriverProtocolState::QueryLocalWaypointTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context, QueryLocalWaypoint& msg, unsigned int& sender)
    {
        Default(context);
        return;
    }

    void WaypointDriver_LocalWaypontDriverProtocolState::QueryTravelSpeedTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context)
    {
        Default(context);
        return;
    }

    void WaypointDriver_LocalWaypontDriverProtocolState::QueryTravelSpeedTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context, QueryTravelSpeed& msg, unsigned int& sender)
    {
        Default(context);
        return;
    }

    void WaypointDriver_LocalWaypontDriverProtocolState::SetLocalWaypointTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context)
    {
        Default(context);
        return;
    }

    void WaypointDriver_LocalWaypontDriverProtocolState::SetLocalWaypointTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context, SetLocalWaypoint& msg, unsigned int& sender)
    {
        Default(context);
        return;
    }

    void WaypointDriver_LocalWaypontDriverProtocolState::SetTravelSpeedTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context)
    {
        Default(context);
        return;
    }

    void WaypointDriver_LocalWaypontDriverProtocolState::SetTravelSpeedTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context, SetTravelSpeed& msg, unsigned int& sender)
    {
        Default(context);
        return;
    }

    void WaypointDriver_LocalWaypontDriverProtocolState::Default(WaypointDriver_LocalWaypontDriverProtocolContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void WaypointDriver_LocalWaypontDriverProtocol_SM_Ready::QueryLocalWaypointTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context, QueryLocalWaypoint& msg, unsigned int& sender)
    {
        WaypointDriver_LocalWaypontDriverProtocol& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : WaypointDriver_LocalWaypontDriverProtocol_SM::Ready"
            << std::endl;
        }

        WaypointDriver_LocalWaypontDriverProtocolState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: WaypointDriver_LocalWaypontDriverProtocol_SM::Ready::QueryLocalWaypointTransition(QueryLocalWaypoint& msg, unsigned int& sender)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.sendReportLocalWaypointAction(msg, sender);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : WaypointDriver_LocalWaypontDriverProtocol_SM::Ready::QueryLocalWaypointTransition(QueryLocalWaypoint& msg, unsigned int& sender)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void WaypointDriver_LocalWaypontDriverProtocol_SM_Ready::QueryTravelSpeedTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context, QueryTravelSpeed& msg, unsigned int& sender)
    {
        WaypointDriver_LocalWaypontDriverProtocol& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : WaypointDriver_LocalWaypontDriverProtocol_SM::Ready"
            << std::endl;
        }

        WaypointDriver_LocalWaypontDriverProtocolState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: WaypointDriver_LocalWaypontDriverProtocol_SM::Ready::QueryTravelSpeedTransition(QueryTravelSpeed& msg, unsigned int& sender)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.sendReportTravelSpeedAction(msg, sender);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : WaypointDriver_LocalWaypontDriverProtocol_SM::Ready::QueryTravelSpeedTransition(QueryTravelSpeed& msg, unsigned int& sender)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void WaypointDriver_LocalWaypontDriverProtocol_SM_Ready::SetLocalWaypointTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context, SetLocalWaypoint& msg, unsigned int& sender)
    {
        WaypointDriver_LocalWaypontDriverProtocol& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : WaypointDriver_LocalWaypontDriverProtocol_SM::Ready"
            << std::endl;
        }

        WaypointDriver_LocalWaypontDriverProtocolState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: WaypointDriver_LocalWaypontDriverProtocol_SM::Ready::SetLocalWaypointTransition(SetLocalWaypoint& msg, unsigned int& sender)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.setLocalWaypointAction(msg, sender);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : WaypointDriver_LocalWaypontDriverProtocol_SM::Ready::SetLocalWaypointTransition(SetLocalWaypoint& msg, unsigned int& sender)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void WaypointDriver_LocalWaypontDriverProtocol_SM_Ready::SetTravelSpeedTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context, SetTravelSpeed& msg, unsigned int& sender)
    {
        WaypointDriver_LocalWaypontDriverProtocol& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : WaypointDriver_LocalWaypontDriverProtocol_SM::Ready"
            << std::endl;
        }

        WaypointDriver_LocalWaypontDriverProtocolState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: WaypointDriver_LocalWaypontDriverProtocol_SM::Ready::SetTravelSpeedTransition(SetTravelSpeed& msg, unsigned int& sender)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.setVelocityAction(msg, sender);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : WaypointDriver_LocalWaypontDriverProtocol_SM::Ready::SetTravelSpeedTransition(SetTravelSpeed& msg, unsigned int& sender)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void WaypointDriver_LocalWaypontDriverProtocol_SM_Internally_Generated_State_DO_NOT_USE::QueryLocalWaypointTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : WaypointDriver_LocalWaypontDriverProtocol_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: WaypointDriver_LocalWaypontDriverProtocol_SM::Internally_Generated_State_DO_NOT_USE::QueryLocalWaypointTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : WaypointDriver_LocalWaypontDriverProtocol_SM::Internally_Generated_State_DO_NOT_USE::QueryLocalWaypointTransition()"
                << std::endl;
        }


        return;
    }

    void WaypointDriver_LocalWaypontDriverProtocol_SM_Internally_Generated_State_DO_NOT_USE::QueryTravelSpeedTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : WaypointDriver_LocalWaypontDriverProtocol_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: WaypointDriver_LocalWaypontDriverProtocol_SM::Internally_Generated_State_DO_NOT_USE::QueryTravelSpeedTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : WaypointDriver_LocalWaypontDriverProtocol_SM::Internally_Generated_State_DO_NOT_USE::QueryTravelSpeedTransition()"
                << std::endl;
        }


        return;
    }

    void WaypointDriver_LocalWaypontDriverProtocol_SM_Internally_Generated_State_DO_NOT_USE::SetLocalWaypointTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : WaypointDriver_LocalWaypontDriverProtocol_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: WaypointDriver_LocalWaypontDriverProtocol_SM::Internally_Generated_State_DO_NOT_USE::SetLocalWaypointTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : WaypointDriver_LocalWaypontDriverProtocol_SM::Internally_Generated_State_DO_NOT_USE::SetLocalWaypointTransition()"
                << std::endl;
        }


        return;
    }

    void WaypointDriver_LocalWaypontDriverProtocol_SM_Internally_Generated_State_DO_NOT_USE::SetTravelSpeedTransition(WaypointDriver_LocalWaypontDriverProtocolContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : WaypointDriver_LocalWaypontDriverProtocol_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: WaypointDriver_LocalWaypontDriverProtocol_SM::Internally_Generated_State_DO_NOT_USE::SetTravelSpeedTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : WaypointDriver_LocalWaypontDriverProtocol_SM::Internally_Generated_State_DO_NOT_USE::SetTravelSpeedTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
