/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : StartNav_StartNavProtocol_sm.sm
 */

#include "urn_jaus_jss_mobility_StartNav_1_0/Messages/MessageSet.h"
#include "urn_jaus_jss_mobility_StartNav_1_0/StartNav_StartNavProtocol.h"
#include "include/urn_jaus_jss_mobility_StartNav_1_0/StartNav_StartNavProtocol_sm.h"

using namespace statemap;

namespace urn_jaus_jss_mobility_StartNav_1_0
{
    // Static class declarations.
    StartNav_StartNavProtocol_SM_Ready StartNav_StartNavProtocol_SM::Ready("StartNav_StartNavProtocol_SM::Ready", 0);
    StartNav_StartNavProtocol_SM_Internally_Generated_State_DO_NOT_USE StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE("StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE", 1);

    void StartNav_StartNavProtocolState::ClearEmergencyTransition(StartNav_StartNavProtocolContext& context)
    {
        Default(context);
        return;
    }

    void StartNav_StartNavProtocolState::ClearEmergencyTransition(StartNav_StartNavProtocolContext& context, ClearEmergency& msg, unsigned int& sender)
    {
        Default(context);
        return;
    }

    void StartNav_StartNavProtocolState::QueryLocalPoseTransition(StartNav_StartNavProtocolContext& context)
    {
        Default(context);
        return;
    }

    void StartNav_StartNavProtocolState::ReleaseControlTransition(StartNav_StartNavProtocolContext& context)
    {
        Default(context);
        return;
    }

    void StartNav_StartNavProtocolState::ReleaseControlTransition(StartNav_StartNavProtocolContext& context, ReleaseControl& msg, unsigned int& sender)
    {
        Default(context);
        return;
    }

    void StartNav_StartNavProtocolState::RequestControlTransition(StartNav_StartNavProtocolContext& context)
    {
        Default(context);
        return;
    }

    void StartNav_StartNavProtocolState::RequestControlTransition(StartNav_StartNavProtocolContext& context, RequestControl& msg, unsigned int& sender)
    {
        Default(context);
        return;
    }

    void StartNav_StartNavProtocolState::ResumeTransition(StartNav_StartNavProtocolContext& context)
    {
        Default(context);
        return;
    }

    void StartNav_StartNavProtocolState::ResumeTransition(StartNav_StartNavProtocolContext& context, Resume& msg, unsigned int& sender)
    {
        Default(context);
        return;
    }

    void StartNav_StartNavProtocolState::SetEmergencyTransition(StartNav_StartNavProtocolContext& context)
    {
        Default(context);
        return;
    }

    void StartNav_StartNavProtocolState::SetEmergencyTransition(StartNav_StartNavProtocolContext& context, SetEmergency& msg, unsigned int& sender)
    {
        Default(context);
        return;
    }

    void StartNav_StartNavProtocolState::SetLocalPoseTransition(StartNav_StartNavProtocolContext& context)
    {
        Default(context);
        return;
    }

    void StartNav_StartNavProtocolState::SetLocalPoseTransition(StartNav_StartNavProtocolContext& context, SetLocalPose& msg, unsigned int& sender)
    {
        Default(context);
        return;
    }

    void StartNav_StartNavProtocolState::StandbyTransition(StartNav_StartNavProtocolContext& context)
    {
        Default(context);
        return;
    }

    void StartNav_StartNavProtocolState::StandbyTransition(StartNav_StartNavProtocolContext& context, Standby& msg, unsigned int& sender)
    {
        Default(context);
        return;
    }

    void StartNav_StartNavProtocolState::Default(StartNav_StartNavProtocolContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void StartNav_StartNavProtocol_SM_Ready::ClearEmergencyTransition(StartNav_StartNavProtocolContext& context, ClearEmergency& msg, unsigned int& sender)
    {
        StartNav_StartNavProtocol& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StartNav_StartNavProtocol_SM::Ready"
            << std::endl;
        }

        StartNav_StartNavProtocolState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StartNav_StartNavProtocol_SM::Ready::ClearEmergencyTransition(ClearEmergency& msg, unsigned int& sender)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.handleClearEmergencyAction(msg, sender);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : StartNav_StartNavProtocol_SM::Ready::ClearEmergencyTransition(ClearEmergency& msg, unsigned int& sender)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void StartNav_StartNavProtocol_SM_Ready::ReleaseControlTransition(StartNav_StartNavProtocolContext& context, ReleaseControl& msg, unsigned int& sender)
    {
        StartNav_StartNavProtocol& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StartNav_StartNavProtocol_SM::Ready"
            << std::endl;
        }

        StartNav_StartNavProtocolState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StartNav_StartNavProtocol_SM::Ready::ReleaseControlTransition(ReleaseControl& msg, unsigned int& sender)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.handleReleaseControlAction(msg, sender);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : StartNav_StartNavProtocol_SM::Ready::ReleaseControlTransition(ReleaseControl& msg, unsigned int& sender)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void StartNav_StartNavProtocol_SM_Ready::RequestControlTransition(StartNav_StartNavProtocolContext& context, RequestControl& msg, unsigned int& sender)
    {
        StartNav_StartNavProtocol& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StartNav_StartNavProtocol_SM::Ready"
            << std::endl;
        }

        StartNav_StartNavProtocolState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StartNav_StartNavProtocol_SM::Ready::RequestControlTransition(RequestControl& msg, unsigned int& sender)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.sendConfrimControlAction(msg, sender);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : StartNav_StartNavProtocol_SM::Ready::RequestControlTransition(RequestControl& msg, unsigned int& sender)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void StartNav_StartNavProtocol_SM_Ready::ResumeTransition(StartNav_StartNavProtocolContext& context, Resume& msg, unsigned int& sender)
    {
        StartNav_StartNavProtocol& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StartNav_StartNavProtocol_SM::Ready"
            << std::endl;
        }

        StartNav_StartNavProtocolState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StartNav_StartNavProtocol_SM::Ready::ResumeTransition(Resume& msg, unsigned int& sender)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.handleResumeAction(msg, sender);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : StartNav_StartNavProtocol_SM::Ready::ResumeTransition(Resume& msg, unsigned int& sender)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void StartNav_StartNavProtocol_SM_Ready::SetEmergencyTransition(StartNav_StartNavProtocolContext& context, SetEmergency& msg, unsigned int& sender)
    {
        StartNav_StartNavProtocol& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StartNav_StartNavProtocol_SM::Ready"
            << std::endl;
        }

        StartNav_StartNavProtocolState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StartNav_StartNavProtocol_SM::Ready::SetEmergencyTransition(SetEmergency& msg, unsigned int& sender)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.handleSetEmergencyAction(msg, sender);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : StartNav_StartNavProtocol_SM::Ready::SetEmergencyTransition(SetEmergency& msg, unsigned int& sender)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void StartNav_StartNavProtocol_SM_Ready::SetLocalPoseTransition(StartNav_StartNavProtocolContext& context, SetLocalPose& msg, unsigned int& sender)
    {
        StartNav_StartNavProtocol& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StartNav_StartNavProtocol_SM::Ready"
            << std::endl;
        }

        StartNav_StartNavProtocolState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StartNav_StartNavProtocol_SM::Ready::SetLocalPoseTransition(SetLocalPose& msg, unsigned int& sender)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.setLocalPositionAction(msg, sender);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : StartNav_StartNavProtocol_SM::Ready::SetLocalPoseTransition(SetLocalPose& msg, unsigned int& sender)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void StartNav_StartNavProtocol_SM_Ready::StandbyTransition(StartNav_StartNavProtocolContext& context, Standby& msg, unsigned int& sender)
    {
        StartNav_StartNavProtocol& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StartNav_StartNavProtocol_SM::Ready"
            << std::endl;
        }

        StartNav_StartNavProtocolState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StartNav_StartNavProtocol_SM::Ready::StandbyTransition(Standby& msg, unsigned int& sender)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.handleStandbyAction(msg, sender);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : StartNav_StartNavProtocol_SM::Ready::StandbyTransition(Standby& msg, unsigned int& sender)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void StartNav_StartNavProtocol_SM_Internally_Generated_State_DO_NOT_USE::ClearEmergencyTransition(StartNav_StartNavProtocolContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE::ClearEmergencyTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE::ClearEmergencyTransition()"
                << std::endl;
        }


        return;
    }

    void StartNav_StartNavProtocol_SM_Internally_Generated_State_DO_NOT_USE::QueryLocalPoseTransition(StartNav_StartNavProtocolContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE::QueryLocalPoseTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE::QueryLocalPoseTransition()"
                << std::endl;
        }


        return;
    }

    void StartNav_StartNavProtocol_SM_Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition(StartNav_StartNavProtocolContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }


        return;
    }

    void StartNav_StartNavProtocol_SM_Internally_Generated_State_DO_NOT_USE::RequestControlTransition(StartNav_StartNavProtocolContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }


        return;
    }

    void StartNav_StartNavProtocol_SM_Internally_Generated_State_DO_NOT_USE::ResumeTransition(StartNav_StartNavProtocolContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE::ResumeTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE::ResumeTransition()"
                << std::endl;
        }


        return;
    }

    void StartNav_StartNavProtocol_SM_Internally_Generated_State_DO_NOT_USE::SetEmergencyTransition(StartNav_StartNavProtocolContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE::SetEmergencyTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE::SetEmergencyTransition()"
                << std::endl;
        }


        return;
    }

    void StartNav_StartNavProtocol_SM_Internally_Generated_State_DO_NOT_USE::SetLocalPoseTransition(StartNav_StartNavProtocolContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE::SetLocalPoseTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE::SetLocalPoseTransition()"
                << std::endl;
        }


        return;
    }

    void StartNav_StartNavProtocol_SM_Internally_Generated_State_DO_NOT_USE::StandbyTransition(StartNav_StartNavProtocolContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE::StandbyTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StartNav_StartNavProtocol_SM::Internally_Generated_State_DO_NOT_USE::StandbyTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
