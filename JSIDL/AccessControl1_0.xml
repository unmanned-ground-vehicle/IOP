<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<service_def name="AccessControl" id="urn:jaus:jss:core:AccessControl" version="1.0" xmlns:ns2="urn:jaus:jsidl:1.1" xmlns="urn:jaus:jsidl:1.0" xmlns:ns3="urn:jaus:jsidl:plus">
    <description xml:space="preserve">The Access Control service offers a basic interface for acquiring preemptable exclusive control to one or more related services that utilize this function. Once the exclusive control is established, the related services shall only execute commands originating from the controlling component. The authority code parameter of this service is used for preemption and is to be set equal to that of its controlling client. This service always grants control to the highest authority client that is requesting exclusive control. Commands from all other clients are ignored unless from a client with higher authority. This service maintains two values, a default value and a current value of a field called authority code. The default value is the value that the service is pre-configured with. Access is provided to clients based on the value of their authority code in comparison to the current value of this service.</description>
    <assumptions xml:space="preserve">Messages may be delayed, lost or reordered.</assumptions>
    <references>
        <inherits_from name="events" id="urn:jaus:jss:core:Events" version="1.0"/>
    </references>
    <message_set>
        <input_set>
            <message_def name="RequestControl" message_id="000D" is_command="true">
                <description xml:space="preserve">This message is used to request interruptible control of the receiving component.  Once control is established, the receiving component shall only execute commands from the sending component.  The authority code parameter is to be set equal to that of the sending component.  The receiving component must always accept the control of the highest authority component that is requesting uninterruptible control.  Commands from all other components are ignored unless from a component with higher authority.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <record name="RequestControlRec" optional="false">
                        <fixed_field name="AuthorityCode" optional="false" field_type="unsigned byte" field_units="one">
                            <value_set offset_to_lower_limit="false">
                                <value_range lower_limit="0" lower_limit_type="inclusive" upper_limit="255" upper_limit_type="inclusive"/>
                            </value_set>
                        </fixed_field>
                    </record>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="ReleaseControl" message_id="000E" is_command="true">
                <description xml:space="preserve">This message is used to relinquish uninterruptible control of the receiving component.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body"/>
                <footer name="Footer"/>
            </message_def>
            <message_def name="QueryControl" message_id="200D" is_command="false">
                <description xml:space="preserve">This message is used by clients to query the current control state of this service.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body"/>
                <footer name="Footer"/>
            </message_def>
            <message_def name="QueryAuthority" message_id="2001" is_command="false">
                <description xml:space="preserve">This message is used by clients to query the current value of the authority code of this service.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body"/>
                <footer name="Footer"/>
            </message_def>
            <message_def name="SetAuthority" message_id="0001" is_command="true">
                <description xml:space="preserve">This message shall set the command authority of the receiving component.  The authority bits range in value from 0 to 255 with 255 being the highest.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <record name="authorityRec" optional="false">
                        <fixed_field name="AuthorityCode" optional="false" field_type="unsigned byte" field_units="one">
                            <value_set offset_to_lower_limit="false">
                                <value_range lower_limit="0" lower_limit_type="inclusive" upper_limit="255" upper_limit_type="inclusive"/>
                            </value_set>
                        </fixed_field>
                    </record>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="QueryTimeout" message_id="2003" is_command="false">
                <description xml:space="preserve">This message is used by clients of this service to query the timeout period of this service.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body"/>
                <footer name="Footer"/>
            </message_def>
        </input_set>
        <output_set>
            <message_def name="ReportControl" message_id="400D" is_command="false">
                <description xml:space="preserve">This message is used to report the current state of control of this service.  If the serivce is in the Controlled state, this message reports the ID of the controlling component. The ID fields shall be set to zero (0) if this service is in the NotControlled state..</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <record name="ReportControlRec" optional="false">
                        <fixed_field name="SubsystemID" optional="false" field_type="unsigned short integer" field_units="one"/>
                        <fixed_field name="NodeID" optional="false" field_type="unsigned byte" field_units="one"/>
                        <fixed_field name="ComponentID" optional="false" field_type="unsigned byte" field_units="one"/>
                        <fixed_field name="AuthorityCode" optional="false" field_type="unsigned byte" field_units="one">
                            <value_set offset_to_lower_limit="false">
                                <value_range lower_limit="0" lower_limit_type="inclusive" upper_limit="255" upper_limit_type="inclusive"/>
                            </value_set>
                        </fixed_field>
                    </record>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="RejectControl" message_id="0010" is_command="false">
                <description xml:space="preserve">The Reject Control message is used to notify a component that control has been released (response code = 0), or a request to release control could not be processed (response code = 1).</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <record name="RejectControlRec" optional="false">
                        <fixed_field name="ResponseCode" optional="false" field_type="unsigned byte" field_units="one">
                            <value_set offset_to_lower_limit="false">
                                <value_enum enum_index="0" enum_const="CONTROL_RELEASED"/>
                                <value_enum enum_index="1" enum_const="NOT_AVAILABLE"/>
                            </value_set>
                        </fixed_field>
                    </record>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="ConfirmControl" message_id="000F" is_command="false">
                <description xml:space="preserve">The Confirm Control message is used to notify a component that it accepts control from that component (or not).  When control has been granted, response code of 0, the component under control will only execute messages from the controlling component until control is released or interrupted.  When the requesting component has lower authority than the current controlling entity, the response will be 2.  For components not supporting interruptible control, or if the component is engaged in other operations that would prevent this service from performing its actions to grant control, the response code value of 1 can be used.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <record name="ConfirmControlRec" optional="false">
                        <fixed_field name="ResponseCode" optional="false" field_type="unsigned byte" field_units="one">
                            <value_set offset_to_lower_limit="false">
                                <value_enum enum_index="0" enum_const="CONTROL_ACCEPTED"/>
                                <value_enum enum_index="1" enum_const="NOT_AVAILABLE"/>
                                <value_enum enum_index="2" enum_const="INSUFFICIENT_AUTHORITY"/>
                            </value_set>
                        </fixed_field>
                    </record>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="ReportAuthority" message_id="4001" is_command="false">
                <description xml:space="preserve">This message is used to report the current command authority.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <record name="ReportAuthorityRec" optional="false">
                        <fixed_field name="AuthorityCode" optional="false" field_type="unsigned byte" field_units="one">
                            <value_set offset_to_lower_limit="false">
                                <value_range lower_limit="0" lower_limit_type="inclusive" upper_limit="255" upper_limit_type="inclusive"/>
                            </value_set>
                        </fixed_field>
                    </record>
                </body>
                <footer name="Footer"/>
            </message_def>
            <message_def name="ReportTimeout" message_id="4003" is_command="false">
                <description xml:space="preserve">This message is used to report the timeout period of this message.</description>
                <header name="AppHeader">
                    <record name="HeaderRec" optional="false">
                        <fixed_field name="MessageID" optional="false" field_type="unsigned short integer" field_units="one"/>
                    </record>
                </header>
                <body name="Body">
                    <record name="ReportTimoutRec" optional="false">
                        <fixed_field name="Timeout" optional="false" field_type="unsigned byte" field_units="second">
                            <value_set offset_to_lower_limit="false">
                                <value_enum enum_index="0" enum_const="TIMEOUT_FEATURE _DISABLED"/>
                            </value_set>
                        </fixed_field>
                    </record>
                </body>
                <footer name="Footer"/>
            </message_def>
        </output_set>
    </message_set>
    <internal_events_set>
        <event_def name="Timeout">
            <description xml:space="preserve">Occurs when access is not re-acquired periodically</description>
            <header name="Header"/>
            <body name="Body"/>
            <footer name="Footer"/>
        </event_def>
    </internal_events_set>
    <protocol_behavior is_stateless="false">
        <start state_machine_name="AccessControl.Events.Transport.ReceiveFSM" state_name="Receiving.Ready.NotControlled"/>
        <start state_machine_name="AccessControl.Events.Transport.SendFSM" state_name="Sending"/>
        <state_machine name="AccessControl.Events.Transport.ReceiveFSM">
            <state name="Receiving" initial_state="Ready">
                <state name="Ready" initial_state="NotControlled">
                    <state name="NotControlled">
                        <entry interpretation="Set the services current authority value to the default               authority value">
                            <action name="init"/>
                        </entry>
                        <transition name="events.transport.Receive">
                            <parameter type="RequestControl" value="msg" interpretation="enveloped request                 control message"/>
                            <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                            <guard condition="! isControlAvailable()" interpretation="True if this service or                 services related to this service are engaged in other operations that would                 prevent this service from performing its actions."/>
                            <ns2:internal/>
                            <action name="events.transport.Send" interpretation="Send a confirm component control                 message with the specified response code to requesting client">
                                <argument value=" 'ConfirmControl' "/>
                                <argument value=" 'NOT_AVAILABLE' "/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="events.transport.Receive">
                            <parameter type="RequestControl" value="msg" interpretation="enveloped request                 control message"/>
                            <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                            <guard condition="! isDefaultAuthorityGreater(msg) &amp;&amp;                 isControlAvailable()" interpretation="True if the base                 authority                 code of this service is greater than the authority code of the client                 service that triggered the corresponding transition and if this service or services                 related to this service are not engaged in other operations that would prevent this                 service from performing its actions"/>
                            <simple>
                                <end_state state="Receiving.Ready.Controlled"/>
                            </simple>
                            <action name="StoreAddress" interpretation="Store the address of the client that                 sent the message that caused this action to be executed">
                                <argument value="transportData"/>
                            </action>
                            <action name="SetAuthority" interpretation="Set the current authority value of this                 service to the specified authority">
                                <argument value="msg"/>
                            </action>
                            <action name="ResetTimer" interpretation="Reset the timer"/>
                            <action name="events.transport.Send" interpretation="Send a confirm control                 message with the specified response code to requesting client">
                                <argument value=" 'ConfirmControl' "/>
                                <argument value=" 'CONTROL_ACCEPTED' "/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="events.transport.Receive">
                            <parameter type="RequestControl" value="msg" interpretation="enveloped request                 control message"/>
                            <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                            <guard condition="isDefaultAuthorityGreater(msg)" interpretation="True if the                 default authority code of this service is greater than the authority code of the                 client service that triggered the corresponding transition"/>
                            <ns2:internal/>
                            <action name="events.transport.Send" interpretation="Send a confirm control                 message with the specified response code to requesting client">
                                <argument value=" 'ConfirmControl' "/>
                                <argument value=" 'INSUFFICIENT_AUTHORITY' "/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="events.transport.Receive">
                            <parameter type="ReleaseControl" value="msg" interpretation="enveloped release                 control message"/>
                            <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                            <ns2:internal/>
                            <action name="events.transport.Send" interpretation="Send a Reject Control message to the client requesting release">
                                <argument value=" 'RejectControl' "/>
                                <argument value=" 'CONTROL_RELEASED' "/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="events.transport.Receive">
                            <parameter type="QueryControl" value="msg" interpretation="enveloped query control                 message"/>
                            <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                            <ns2:internal/>
                            <action name="events.transport.Send" interpretation="Send a Report Control message                 with the                 specified control value">
                                <argument value=" 'ReportControl' "/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                    </state>
                    <state name="Controlled">
                        <transition name="events.transport.Receive">
                            <parameter type="RequestControl" value="msg" interpretation="enveloped request                 control message"/>
                            <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                            <guard condition="! isControlAvailable()" interpretation="True if this service or                 services related to this service are engaged in other operations that would                 prevent this service from performing its actions."/>
                            <ns2:internal/>
                            <action name="events.transport.Send" interpretation="Send a confirm control                 message with the specified response code to requesting client">
                                <argument value=" 'ConfirmControl' "/>
                                <argument value=" 'NOT_AVAILABLE' "/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="events.transport.Receive">
                            <parameter type="SetAuthority" value="msg" interpretation="enveloped set authority                 message"/>
                            <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                            <guard condition="isAuthorityValid(msg) &amp;&amp; isControllingClient( transportData )                 &amp;&amp; isControlAvailable()" interpretation="True if the value of the                 authority                  code received from the client is less than or equal to                 the current authority value                  of this service, , but greater than or                 equal to the receiving components default authority,                 and if the                 message that triggered the transition is received from the                  client                 that is in control of this service"/>
                            <ns2:internal/>
                            <action name="SetAuthority" interpretation="Set the current authority value of this                 service to the specified authority">
                                <argument value="msg"/>
                            </action>
                        </transition>
                        <transition name="events.transport.Receive">
                            <parameter type="RequestControl" value="msg" interpretation="enveloped request                 control message"/>
                            <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                            <guard condition="isCurrentAuthorityLess(msg) &amp;&amp; !                 isControllingClient( transportData )" interpretation="True if the current authority value of                 this service is less than the authority code of the client service that triggered                 the corresponding transition, and if the message that triggered the transition is                 not received from the client that is in control of this service"/>
                            <ns2:internal/>
                            <action name="events.transport.Send" interpretation="Send a Reject Control message to                 current                 controlling client">
                                <argument value=" 'RejectControl' " interpretation="Send a Reject Control message with the specified response code to the client that currently has control."/>
                                <argument value=" 'CONTROL_RELEASED' "/>
                                <argument value="transportData"/>
                            </action>
                            <action name="StoreAddress" interpretation="Store the address of the client that                 sent                   the message that caused this action to be executed">
                                <argument value="transportData"/>
                            </action>
                            <action name="SetAuthority" interpretation="Set the current authority value of this                 service to the specified authority">
                                <argument value="msg"/>
                            </action>
                            <action name="ResetTimer" interpretation="Reset the timer"/>
                            <action name="events.transport.Send" interpretation="Send a confirm control                 message with the specified response code to requesting client">
                                <argument value=" 'ConfirmControl' "/>
                                <argument value=" 'CONTROL_ACCEPTED' "/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="events.transport.Receive">
                            <parameter type="RequestControl" value="msg" interpretation="enveloped request                 control message"/>
                            <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                            <guard condition="! isCurrentAuthorityLess(msg) &amp;&amp; !                 isControllingClient( transportData )" interpretation="True if the current authority value of                 this service is not less than the authority code of the client service that                 triggered the corresponding transition, and if the message that triggered                 the transition is received from the client that is in control of this service"/>
                            <ns2:internal/>
                            <action name="events.transport.Send" interpretation="Send a confirm control                 message with the specified response code to requesting client">
                                <argument value=" 'ConfirmControl' "/>
                                <argument value=" 'INSUFFICIENT_AUTHORITY' "/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="events.transport.Receive">
                            <parameter type="RequestControl" value="msg" interpretation="enveloped request                 control message"/>
                            <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                            <guard condition="! isDefaultAuthorityGreater(msg) &amp;&amp;                 isControllingClient( transportData )" interpretation="True if the default authority code of                 this service is not greater than the authority code of the client service that                 triggered the corresponding transition, and if the message that triggered the                 transition is received from the client that is in control of this service"/>
                            <ns2:internal/>
                            <action name="ResetTimer" interpretation="Reset the timer"/>
                            <action name="SetAuthority" interpretation="Set the current authority value of this                 service to the specified authority">
                                <argument value="msg"/>
                            </action>
                            <action name="events.transport.Send" interpretation="Send a confirm control                 message with the specified response code to requesting client">
                                <argument value=" 'ConfirmControl' "/>
                                <argument value=" 'CONTROL_ACCEPTED' "/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="events.transport.Receive">
                            <parameter type="QueryControl" value="msg" interpretation="enveloped query control                 message"/>
                            <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                            <ns2:internal/>
                            <action name="events.transport.Send" interpretation="Send a Report Control message                 with the                 specified control value">
                                <argument value=" 'ReportControl' "/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="events.transport.Receive">
                            <parameter type="ReleaseControl" value="msg" interpretation="enveloped request                 control message"/>
                            <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                            <guard condition="! isControlAvailable()" interpretation="True if this service or                 services related to this service are engaged in other operations that would                 prevent this service from performing its actions."/>
                            <ns2:internal/>
                            <action name="events.transport.Send" interpretation="Send a reject control                 message                 with the specified response code to the client requesting release">
                                <argument value=" 'RejectControl' "/>
                                <argument value=" 'NOT_AVAILABLE' "/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="events.transport.Receive">
                            <parameter type="ReleaseControl" value="msg" interpretation="enveloped release                 control message"/>
                            <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                            <guard condition="isControllingClient( transportData ) &amp;&amp; isControlAvailable()" interpretation="True if the message that                 triggered the transition is                 received from the client that is in control of this                 service, and if                 this service or services related to this service are not engaged in other                 operations that would prevent this service from performing its actions"/>
                            <simple>
                                <end_state state="Receiving.Ready.NotControlled"/>
                            </simple>
                            <action name="events.transport.Send" interpretation="Send a Reject Control message with the specified response code to the client requesting release">
                                <argument value=" 'RejectControl' "/>
                                <argument value=" 'CONTROL_RELEASED' "/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="transport.Receive">
                            <parameter type="RequestControl" value="msg"/>
                            <parameter type="Receive.Body.ReceiveRec" value="transportData"/>
                            <guard condition="isDefaultAuthorityGreater(msg) &amp;&amp;                 isControllingClient(transportData)" interpretation="True if the default authority code of this                 service is greater than the authority code of the client service that triggered the                 corresponding transition, and if the message that triggered the transition is                 received from the client that is in control of this service"/>
                            <simple>
                                <end_state state="Receiving.Ready.NotControlled"/>
                            </simple>
                            <action name="transport.Send" interpretation="Send a Reject Control message">
                                <argument value=" 'RejectControl' " interpretation="Send a Reject Control message with the specified response code to the client that currently has control"/>
                                <argument value=" 'CONTROL_RELEASED'"/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="Timeout">
                            <guard condition="isControlAvailable()" interpretation="True if this service or                 services related to this service are not engaged in other operations that would                 prevent this service from performing its actions."/>
                            <simple>
                                <end_state state="Receiving.Ready.NotControlled"/>
                            </simple>
                            <action name="events.transport.Send" interpretation="Send a Reject Control message to                 controlling client">
                                <argument value=" 'RejectControl' " interpretation="Send a Reject Control message with the specified response code to the client that currently has control"/>
                                <argument value=" 'CONTROL_RELEASED' "/>
                            </action>
                        </transition>
                    </state>
                    <default_state>
                        <transition name="events.transport.Receive">
                            <parameter type="QueryAuthority" value="msg" interpretation="enveloped query                 authority message"/>
                            <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                            <ns2:internal/>
                            <action name="events.transport.Send" interpretation="Send a Report Authority message                 to                 querying client">
                                <argument value=" 'ReportAuthority' "/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="events.transport.Receive">
                            <parameter type="QueryTimeout" value="msg" interpretation="enveloped query                 timeout message"/>
                            <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data"/>
                            <ns2:internal/>
                            <action name="events.transport.Send" interpretation="Send a Report Timeout message to                 querying client">
                                <argument value=" 'ReportTimeout' "/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                    </default_state>
                    <ns3:mxCell id="14" parent="3" style="state;strokeColor=#BC1212;fontColor=#BC1212;" value="Ready;" vertex="1">
                        <ns3:mxGeometry as="geometry" x="110.0" y="110.0" width="80.0" height="80.0"/>
                    </ns3:mxCell>
                </state>
                <ns3:mxCell id="3" parent="2" style="state;strokeColor=#BC1212;fontColor=#BC1212;" value="Receiving;" vertex="1">
                    <ns3:mxGeometry as="geometry" x="110.0" y="110.0" width="80.0" height="80.0"/>
                </ns3:mxCell>
            </state>
            <pseudo_start_state>
                <state>
                    <ns3:mxCell id="10" parent="2" style="pseudoStartState;fillColor=#BC1212;strokeColor=#BC1212;fontColor=#BC1212;" value="" vertex="1">
                        <ns3:mxGeometry as="geometry" x="70.0" y="70.0" width="20.0" height="20.0"/>
                    </ns3:mxCell>
                </state>
                <transition>
                    <ns3:mxCell id="11" parent="2" source="10" target="3" style="simpleTransition;strokeColor=#BC1212;fontColor=#BC1212;" value="" edge="1">
                        <ns3:mxGeometry as="geometry" x="70.0" y="70.0" width="20.0" height="20.0"/>
                    </ns3:mxCell>
                </transition>
            </pseudo_start_state>
            <ns3:mxCell id="2" parent="1" style="finiteStateMachine;strokeColor=#BC1212;fontColor=#BC1212;" value="name = AccessControl.Events.Transport.ReceiveFSM; NEWLINE isStateless = false; NEWLINE" vertex="1">
                <ns3:mxGeometry as="geometry" x="0.0" y="0.0" width="850.0" height="400.0"/>
            </ns3:mxCell>
        </state_machine>
        <state_machine name="AccessControl.Events.Transport.SendFSM">
            <state name="Sending">
                <ns3:mxCell id="6" parent="5" style="state;strokeColor=#BC1212;fontColor=#BC1212;" value="Sending;" vertex="1">
                    <ns3:mxGeometry as="geometry" x="110.0" y="110.0" width="80.0" height="80.0"/>
                </ns3:mxCell>
            </state>
            <pseudo_start_state>
                <state>
                    <ns3:mxCell id="12" parent="5" style="pseudoStartState;fillColor=#BC1212;strokeColor=#BC1212;fontColor=#BC1212;" value="" vertex="1">
                        <ns3:mxGeometry as="geometry" x="70.0" y="70.0" width="20.0" height="20.0"/>
                    </ns3:mxCell>
                </state>
                <transition>
                    <ns3:mxCell id="13" parent="5" source="12" target="6" style="simpleTransition;strokeColor=#BC1212;fontColor=#BC1212;" value="" edge="1">
                        <ns3:mxGeometry as="geometry" x="70.0" y="70.0" width="20.0" height="20.0"/>
                    </ns3:mxCell>
                </transition>
            </pseudo_start_state>
            <ns3:mxCell id="5" parent="1" style="finiteStateMachine;strokeColor=#BC1212;fontColor=#BC1212;" value="name = AccessControl.Events.Transport.SendFSM; NEWLINE isStateless = false; NEWLINE" vertex="1">
                <ns3:mxGeometry as="geometry" x="0.0" y="400.0" width="850.0" height="400.0"/>
            </ns3:mxCell>
        </state_machine>
    </protocol_behavior>
</service_def>
