#ifndef _H_NAVIGATIONANDREPORTINGCLIENT_NAVIGATIONANDREPORTINGCLIENTPROTOCOL_SM
#define _H_NAVIGATIONANDREPORTINGCLIENT_NAVIGATIONANDREPORTINGCLIENTPROTOCOL_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : NavigationAndReportingClient_NavigationAndReportingClientProtocol_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace urn_jaus_jss_core_NavigationAndReportingClient_1_0
{
    // Forward declarations.
    class NavigationAndReportingClient_NavigationAndReportingClientProtocol_SM;
    class NavigationAndReportingClient_NavigationAndReportingClientProtocol_SM_Ready;
    class NavigationAndReportingClient_NavigationAndReportingClientProtocol_SM_Internally_Generated_State_DO_NOT_USE;
    class NavigationAndReportingClient_NavigationAndReportingClientProtocol_SM_Default;
    class NavigationAndReportingClient_NavigationAndReportingClientProtocolState;
    class NavigationAndReportingClient_NavigationAndReportingClientProtocolContext;
    class NavigationAndReportingClient_NavigationAndReportingClientProtocol;

    class NavigationAndReportingClient_NavigationAndReportingClientProtocolState :
        public statemap::State
    {
    public:

        NavigationAndReportingClient_NavigationAndReportingClientProtocolState(const char *name, int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext&) {};
        virtual void Exit(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext&) {};

        virtual void ConfirmControlTransition(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext& context);
        virtual void ConfirmControlTransition(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext& context, ConfirmControl& msg, unsigned int& sender);
        virtual void ReportLocalPoseTransition(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext& context);
        virtual void ReportLocalPoseTransition(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext& context, ReportLocalPose& msg, unsigned int& sender);
        virtual void ReportLocalWaypointTransition(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext& context);
        virtual void ReportLocalWaypointTransition(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext& context, ReportLocalWaypoint& msg, unsigned int& sender);
        virtual void ReportTravelSpeedTransition(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext& context);
        virtual void ReportTravelSpeedTransition(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext& context, ReportTravelSpeed& msg, unsigned int& sender);

    protected:

        virtual void Default(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext& context);
    };

    class NavigationAndReportingClient_NavigationAndReportingClientProtocol_SM
    {
    public:

        static NavigationAndReportingClient_NavigationAndReportingClientProtocol_SM_Ready Ready;
        static NavigationAndReportingClient_NavigationAndReportingClientProtocol_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE;
    };

    class NavigationAndReportingClient_NavigationAndReportingClientProtocol_SM_Default :
        public NavigationAndReportingClient_NavigationAndReportingClientProtocolState
    {
    public:

        NavigationAndReportingClient_NavigationAndReportingClientProtocol_SM_Default(const char *name, int stateId)
        : NavigationAndReportingClient_NavigationAndReportingClientProtocolState(name, stateId)
        {};

    };

    class NavigationAndReportingClient_NavigationAndReportingClientProtocol_SM_Ready :
        public NavigationAndReportingClient_NavigationAndReportingClientProtocol_SM_Default
    {
    public:
        NavigationAndReportingClient_NavigationAndReportingClientProtocol_SM_Ready(const char *name, int stateId)
        : NavigationAndReportingClient_NavigationAndReportingClientProtocol_SM_Default(name, stateId)
        {};

        void ConfirmControlTransition(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext& context, ConfirmControl& msg, unsigned int& sender);
        void ReportLocalPoseTransition(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext& context, ReportLocalPose& msg, unsigned int& sender);
        void ReportLocalWaypointTransition(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext& context, ReportLocalWaypoint& msg, unsigned int& sender);
        void ReportTravelSpeedTransition(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext& context, ReportTravelSpeed& msg, unsigned int& sender);
    };

    class NavigationAndReportingClient_NavigationAndReportingClientProtocol_SM_Internally_Generated_State_DO_NOT_USE :
        public NavigationAndReportingClient_NavigationAndReportingClientProtocol_SM_Default
    {
    public:
        NavigationAndReportingClient_NavigationAndReportingClientProtocol_SM_Internally_Generated_State_DO_NOT_USE(const char *name, int stateId)
        : NavigationAndReportingClient_NavigationAndReportingClientProtocol_SM_Default(name, stateId)
        {};

        void ConfirmControlTransition(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext& context);
        void ReportLocalPoseTransition(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext& context);
        void ReportLocalWaypointTransition(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext& context);
        void ReportTravelSpeedTransition(NavigationAndReportingClient_NavigationAndReportingClientProtocolContext& context);
    };

    class NavigationAndReportingClient_NavigationAndReportingClientProtocolContext :
        public statemap::FSMContext
    {
    public:

        NavigationAndReportingClient_NavigationAndReportingClientProtocolContext(NavigationAndReportingClient_NavigationAndReportingClientProtocol& owner)
        : FSMContext(NavigationAndReportingClient_NavigationAndReportingClientProtocol_SM::Ready),
          _owner(owner)
        {};

        NavigationAndReportingClient_NavigationAndReportingClientProtocolContext(NavigationAndReportingClient_NavigationAndReportingClientProtocol& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        NavigationAndReportingClient_NavigationAndReportingClientProtocol& getOwner() const
        {
            return (_owner);
        };

        NavigationAndReportingClient_NavigationAndReportingClientProtocolState& getState() const
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return (dynamic_cast<NavigationAndReportingClient_NavigationAndReportingClientProtocolState&>(*_state));
        };

        void ConfirmControlTransition()
        {
            setTransition("ConfirmControlTransition");
            (getState()).ConfirmControlTransition(*this);
            setTransition(NULL);
        };

        void ConfirmControlTransition(ConfirmControl& msg, unsigned int& sender)
        {
            setTransition("ConfirmControlTransition");
            (getState()).ConfirmControlTransition(*this, msg, sender);
            setTransition(NULL);
        };

        void ReportLocalPoseTransition()
        {
            setTransition("ReportLocalPoseTransition");
            (getState()).ReportLocalPoseTransition(*this);
            setTransition(NULL);
        };

        void ReportLocalPoseTransition(ReportLocalPose& msg, unsigned int& sender)
        {
            setTransition("ReportLocalPoseTransition");
            (getState()).ReportLocalPoseTransition(*this, msg, sender);
            setTransition(NULL);
        };

        void ReportLocalWaypointTransition()
        {
            setTransition("ReportLocalWaypointTransition");
            (getState()).ReportLocalWaypointTransition(*this);
            setTransition(NULL);
        };

        void ReportLocalWaypointTransition(ReportLocalWaypoint& msg, unsigned int& sender)
        {
            setTransition("ReportLocalWaypointTransition");
            (getState()).ReportLocalWaypointTransition(*this, msg, sender);
            setTransition(NULL);
        };

        void ReportTravelSpeedTransition()
        {
            setTransition("ReportTravelSpeedTransition");
            (getState()).ReportTravelSpeedTransition(*this);
            setTransition(NULL);
        };

        void ReportTravelSpeedTransition(ReportTravelSpeed& msg, unsigned int& sender)
        {
            setTransition("ReportTravelSpeedTransition");
            (getState()).ReportTravelSpeedTransition(*this, msg, sender);
            setTransition(NULL);
        };

    private:

        NavigationAndReportingClient_NavigationAndReportingClientProtocol& _owner;
    };
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_NAVIGATIONANDREPORTINGCLIENT_NAVIGATIONANDREPORTINGCLIENTPROTOCOL_SM
