#ifndef _H_CAPABILITYDISCOVERYSERVICEDEF_CAPABILITYDISCOVERYPROTOCOL_SM
#define _H_CAPABILITYDISCOVERYSERVICEDEF_CAPABILITYDISCOVERYPROTOCOL_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace urn_jaus_jss_mobility_CDServiceDef_1_0
{
    // Forward declarations.
    class CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_SM;
    class CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_SM_Ready;
    class CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_SM_Internally_Generated_State_DO_NOT_USE;
    class CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_SM_Default;
    class CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolState;
    class CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolContext;
    class CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol;

    class CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolState :
        public statemap::State
    {
    public:

        CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolState(const char *name, int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolContext&) {};
        virtual void Exit(CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolContext&) {};

        virtual void ReceiveTransition(CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolContext& context, ReportIdentification& msg, Receive::Body::ReceiveRec& transportData);
        virtual void ReceiveTransition(CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolContext& context, ReportServices& msg, Receive::Body::ReceiveRec& transportData);
        virtual void ReportIdentificationTransition(CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolContext& context);
        virtual void ReportServicesTransition(CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolContext& context);

    protected:

        virtual void Default(CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolContext& context);
    };

    class CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_SM
    {
    public:

        static CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_SM_Ready Ready;
        static CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE;
    };

    class CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_SM_Default :
        public CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolState
    {
    public:

        CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_SM_Default(const char *name, int stateId)
        : CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolState(name, stateId)
        {};

    };

    class CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_SM_Ready :
        public CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_SM_Default
    {
    public:
        CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_SM_Ready(const char *name, int stateId)
        : CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_SM_Default(name, stateId)
        {};

        void ReceiveTransition(CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolContext& context, ReportIdentification& msg, Receive::Body::ReceiveRec& transportData);
        void ReceiveTransition(CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolContext& context, ReportServices& msg, Receive::Body::ReceiveRec& transportData);
    };

    class CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_SM_Internally_Generated_State_DO_NOT_USE :
        public CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_SM_Default
    {
    public:
        CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_SM_Internally_Generated_State_DO_NOT_USE(const char *name, int stateId)
        : CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_SM_Default(name, stateId)
        {};

        void ReportIdentificationTransition(CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolContext& context);
        void ReportServicesTransition(CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolContext& context);
    };

    class CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolContext :
        public statemap::FSMContext
    {
    public:

        CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolContext(CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol& owner)
        : FSMContext(CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol_SM::Ready),
          _owner(owner)
        {};

        CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolContext(CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol& getOwner() const
        {
            return (_owner);
        };

        CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolState& getState() const
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return (dynamic_cast<CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocolState&>(*_state));
        };

        void ReceiveTransition(ReportIdentification& msg, Receive::Body::ReceiveRec& transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReceiveTransition(ReportServices& msg, Receive::Body::ReceiveRec& transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReportIdentificationTransition()
        {
            setTransition("ReportIdentificationTransition");
            (getState()).ReportIdentificationTransition(*this);
            setTransition(NULL);
        };

        void ReportServicesTransition()
        {
            setTransition("ReportServicesTransition");
            (getState()).ReportServicesTransition(*this);
            setTransition(NULL);
        };

    private:

        CapabilityDiscoveryServiceDef_CapabilityDiscoveryProtocol& _owner;
    };
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_CAPABILITYDISCOVERYSERVICEDEF_CAPABILITYDISCOVERYPROTOCOL_SM
